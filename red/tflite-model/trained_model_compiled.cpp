/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 30.03.2023 13:04:00

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 304;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,57 } };
const TfArray<1, float> quant0_scale = { 1, { 3.7030124664306641, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[40*57] = { 
  -83, -67, -10, -94, -89, 88, -77, 37, 89, 65, 83, 91, -66, -101, -47, -72, 13, 25, -60, 23, 76, 70, -91, -29, -53, 45, -93, 8, 6, -21, 6, -60, -55, 44, -8, 82, -16, -25, 56, -13, 73, 8, -14, -45, -23, 78, 9, -5, 15, -3, -107, 62, -24, 31, 9, 12, -57, 
  24, 11, 12, 76, -74, 65, -12, -49, -29, 82, 3, -73, 43, 36, -45, 93, -90, -85, -24, 83, -43, 11, -76, 37, -9, 75, -84, 105, -82, -11, 99, -48, -25, 47, 72, -95, -17, 65, -69, 67, 70, -78, -36, -74, -27, 97, -79, -95, 14, -93, -3, -51, -50, -69, -23, -39, 58, 
  -1, -82, 0, -99, -65, -35, -77, 55, -71, 87, 70, -52, -47, 11, -17, -68, -91, -70, 24, -51, 85, -4, -25, 73, 105, 96, 19, 66, 64, 32, 37, -92, 48, -50, 55, 75, -39, -36, -72, -77, 25, -75, 85, -9, -73, -33, -100, 102, 70, 49, -76, 65, 59, -66, -15, -5, 22, 
  -102, -83, 28, -73, 16, 1, 16, 9, -28, 98, -104, 105, -14, 7, 79, 0, 7, -23, 25, -77, 6, -24, -78, 77, 59, 88, -41, -95, 56, 67, -97, -22, -58, -32, -100, 49, -1, 13, -88, -51, 61, -58, 54, 80, 88, -4, -41, 61, -79, 58, -21, -80, 18, -7, 41, 44, -35, 
  24, -45, 14, -61, 38, 53, 12, -70, -33, 42, 35, -21, 7, 109, 114, 25, -33, -34, 78, -57, 47, -89, -79, 104, 72, 62, 37, 84, 80, 61, -57, -17, 118, 35, -4, -24, 4, 40, 44, 5, -39, 76, 81, 0, -60, -54, 54, 113, -47, 118, -40, -47, -21, -64, -12, 59, -37, 
  68, -19, -9, 25, -3, -53, 94, 75, -55, 69, -53, -21, -73, 16, 55, 46, 3, -32, -12, 102, 8, 82, -33, -100, -20, -21, -38, -21, 24, 62, -25, 82, 18, 61, 14, -105, -57, -56, 20, 31, -89, 24, 98, -38, -80, 27, -98, -80, 40, -79, -7, 11, 65, -11, -44, 0, 58, 
  -85, -19, -33, 24, -55, -93, -110, 84, -28, 22, 14, 90, 21, -57, 20, 41, -71, -44, 18, 1, 91, -86, -22, 70, 49, 31, 64, -105, -65, 1, 34, 10, -50, 28, -54, -100, -25, -46, 18, 78, 57, -42, 45, -50, 87, -45, -3, -99, 60, 91, 29, 57, -17, 42, -85, 89, 50, 
  -42, -75, -79, 8, 76, 58, -82, -65, -9, -1, -40, -108, -24, 65, 30, -99, -99, 3, -110, 36, 20, 72, -76, 38, 15, 87, -55, 34, -7, -41, -23, 23, -101, 35, 58, -106, -42, 29, 8, 76, 81, -18, -68, 64, -87, -101, -109, -83, -112, -75, -103, -101, -12, -19, 51, 81, 63, 
  23, 30, 74, -42, 35, -112, -1, -114, 9, 66, -22, -28, -53, -98, 74, -46, -54, 63, -25, -98, 48, -64, -38, 73, -81, -113, 13, -39, -97, 52, -26, -64, 80, -112, -5, 31, 38, -82, 36, 79, -40, 63, 44, 37, 32, 74, -107, -2, -31, 87, 74, 35, -77, 10, -9, -16, -88, 
  13, 28, -110, 10, 71, 22, -32, 27, 46, 103, 84, 11, 98, -17, 109, -63, 15, 2, 7, 14, -58, 36, 49, 88, -15, -8, -44, 92, -63, 75, -41, 116, 112, 114, 94, 29, -36, 61, 80, 56, -18, -23, -83, -9, 48, -69, 78, -38, 27, -33, 36, 38, 4, -71, -63, -56, 46, 
  -84, -99, 98, 34, 14, 8, 20, -12, -66, -32, -57, 66, -45, -75, 36, 100, -97, 91, -37, -67, -42, 84, 34, 20, -43, 94, -84, 63, 14, -100, -58, 61, -76, 85, -102, -43, -59, 32, -84, 54, 73, -56, -74, 55, 46, 70, 32, 21, 86, 84, -64, 1, -101, 104, 94, -7, -71, 
  72, -19, 25, 12, 66, -37, -1, -77, 0, 66, 38, -18, 59, -36, -80, -106, -83, 61, 70, 70, -57, -89, -103, -118, -19, -40, 70, 86, 68, -112, -41, 51, -5, 62, 23, -85, -12, -49, -82, -71, -66, 29, 11, 60, -59, -20, 17, -105, -21, -37, -110, 58, 28, -77, 52, -9, -101, 
  38, 16, 82, 26, -17, -9, -77, 90, 51, -101, -99, 92, -89, -79, 80, 67, -35, -92, -57, -80, -26, 20, -12, 59, -18, -33, -35, 81, 71, 59, -80, 34, -28, 90, 87, -101, 26, -88, 0, -55, 10, 89, -64, -69, -17, 80, -81, 7, -104, -88, 69, -25, -36, 26, 46, -64, 15, 
  -1, -41, 25, 40, 21, 91, 40, -6, -72, 18, -112, 33, -113, 47, 80, -114, 20, 62, 83, 48, -44, 82, -70, -67, -12, -77, -21, 57, 10, -104, -13, 91, -10, 26, -115, 72, -9, 85, 32, -42, 36, 48, 53, 57, -81, -32, -77, 41, 54, 66, -87, -41, -7, 44, -105, 83, 61, 
  -55, 107, 40, 59, 17, -81, -79, 17, -50, -38, 28, -54, 66, -71, -37, 22, 81, 90, 32, -67, -9, 61, -32, 72, 80, -72, 67, -11, -32, 82, -95, -17, -91, 67, -69, 81, 88, -24, 90, -19, 41, -38, -34, -16, -75, 36, 74, 66, -94, 6, -51, -99, -63, -45, 89, -96, 31, 
  -64, -32, -26, -63, -14, -61, -42, 103, -8, 64, 25, 26, -47, 63, 10, -96, -92, 67, -27, -5, 88, 83, -41, -97, -38, -13, 25, 20, -12, -15, 61, -78, -7, -57, -97, 85, 27, -43, -43, -74, 20, 66, -30, -48, 55, -86, 3, 49, -95, -5, -48, 27, 16, -43, 36, 96, -105, 
  -68, 73, -6, 4, 2, 20, -43, -51, 90, -70, -31, -30, 83, -4, 122, 25, 8, 44, 9, -70, 16, -62, 60, 68, 115, 108, -1, -10, -70, 23, -29, -7, -7, 2, 23, -23, 86, 42, 94, 70, 41, 56, 52, 20, 57, -80, 106, -42, 106, 123, 123, -76, 55, -77, 59, 91, -40, 
  -27, -87, 96, 36, -42, 28, 41, 3, 24, -37, -76, 78, 110, -55, 80, 80, 38, -74, 114, -66, -88, -71, 118, 83, 30, -23, -29, 118, 9, 59, 98, 88, 108, -19, 8, 96, -81, 68, -68, 70, 69, -26, 92, 112, -30, 29, -64, 120, 83, 79, 50, 111, 29, -4, -7, 94, 102, 
  -70, 84, 63, -2, -28, -89, 77, -45, -41, -87, 65, -31, -67, 78, 20, 58, 85, 45, 45, 23, -36, 30, 99, -79, 55, 9, -75, 39, 14, -99, 11, 103, 77, -79, -75, 34, -6, 93, -59, 57, -79, -46, -102, 3, -50, -56, 22, 20, 14, -19, -67, -32, -60, -57, 35, -25, 90, 
  -12, 88, 5, 18, 109, -9, 10, 103, 41, 47, -15, 108, 88, 15, -75, -82, 122, 51, 100, 72, -80, 80, -43, 2, -31, 106, -16, -21, 103, 33, 43, 46, -41, 115, 31, 94, 26, -73, 66, -15, -13, -5, -74, 9, -79, -16, 66, 76, 47, 121, -5, 88, 87, 27, 23, -51, 119, 
  -78, 8, 16, -82, 9, -58, 85, 95, -40, -73, -101, -83, -68, 36, -43, -99, 85, -50, 63, -18, 109, 58, 24, 43, 10, 75, 75, 15, -27, -4, -34, -34, -35, 41, -85, -69, 2, 90, 71, 55, 53, 61, 22, 27, 66, -86, 46, -40, 33, 93, -60, -57, -90, -87, 24, -21, -19, 
  24, -40, 98, 86, 69, -49, -88, -42, -87, 47, -56, -58, -59, 50, 6, 95, -18, 91, 58, -51, 19, 4, -96, -5, -57, 103, -50, -16, 102, -78, 8, 63, -52, -69, -25, 53, -57, 12, -92, -94, -61, -103, -14, 82, -96, -5, -73, 88, 88, -100, 83, 72, 89, 20, -47, 10, -25, 
  -81, 53, 30, -4, 32, -4, -1, -66, -3, -79, 6, 42, 109, -32, -41, 99, 62, 55, 7, -44, -24, -7, 33, -5, -60, 18, -50, 75, 49, 98, -79, 58, -56, 30, 115, 66, 121, 82, -5, -18, -54, 55, 123, 76, 67, 47, -11, 57, 10, 3, 45, -1, 104, 111, -50, 60, -19, 
  -20, 53, 25, 30, 103, -76, 62, -36, -7, 77, -50, 7, 112, -17, 36, 93, -69, 95, -3, 18, -33, 50, -51, -64, 78, -45, 109, -45, 17, -56, -41, 82, 47, -87, 54, -21, -47, -59, 52, 73, -70, 27, 71, -38, -17, -54, 81, -71, -27, 7, -47, 59, 44, -53, -67, -47, 6, 
  46, 52, 106, -54, 19, -9, -35, -17, -59, 6, -55, 11, -60, 29, -14, -68, 45, -52, 41, -67, -97, -15, -18, 65, 21, -107, -70, -35, -93, 16, 9, -73, -20, -80, -114, -20, 9, 26, 15, 86, 64, -76, -16, -61, 76, 29, -54, -13, 29, -2, -30, 88, 8, -47, 45, 58, 81, 
  -67, -25, 41, 24, -98, -76, -61, 7, 24, 75, -110, -47, 34, -55, 21, 85, 81, 51, 15, -66, 37, 58, 54, 52, -21, -8, -58, 52, -52, -2, -13, -8, -15, 29, -89, -57, -109, -108, 96, 37, 33, -8, 86, 17, -41, 16, 9, -8, 83, 29, -21, 48, -71, -87, -8, 67, -30, 
  78, -54, 46, -39, 40, -94, -90, 9, 34, -52, -29, -94, -14, 2, -44, -46, -24, -60, 56, -56, -13, -41, -19, 74, 31, -3, -53, 35, 31, 0, -45, -49, -104, -44, -29, 39, 30, -73, 19, 12, 29, -13, -70, 65, -8, -30, 66, 2, -89, 72, -27, 13, -96, -109, -33, 31, 39, 
  86, -39, 111, -112, -96, -71, -61, -26, -97, -44, -98, -36, -106, 17, 57, 72, -69, 17, 8, 21, -106, -54, 64, 67, -12, 18, 80, -3, 77, -75, 38, 63, 18, -86, -76, 73, 85, 35, -5, 68, 103, -22, 19, -99, 81, -102, -109, -78, -93, 43, -16, 16, 11, 56, -33, -1, -58, 
  58, -84, 33, -5, -67, 114, -25, -49, -3, 15, -14, -40, 108, 39, 14, 54, 57, 48, 27, 41, -71, 54, 21, 66, 103, -63, -58, 15, 52, 45, 92, 118, 107, 30, -90, -54, 118, 110, 69, -2, -41, -21, 5, 53, -5, -2, -11, 56, -79, -62, 82, -84, 60, -69, 57, -11, -23, 
  39, 71, -23, -20, 1, -14, 15, -25, 112, -65, -46, 107, -58, -46, 79, 51, -58, 108, 96, 94, -27, 42, -62, 9, 93, 123, 121, -79, -22, 50, -17, -48, 107, -38, 64, -24, 40, 20, 87, -50, -100, 50, 71, -17, 29, 48, -55, 2, -53, -50, 35, -38, -9, -39, 121, 25, -67, 
  -86, -78, -35, -3, 70, 89, 88, -76, 64, -11, 6, -94, 33, 58, -86, -18, -2, 39, 13, -10, 5, 90, 67, 63, -97, -50, 2, -66, 86, 96, 20, -91, -52, -27, -54, -16, -53, -49, -89, 67, 93, -86, 56, -59, 69, -20, -6, -59, -9, 83, -31, 61, 33, 100, 53, 44, 35, 
  75, -3, 85, 89, 113, 101, -56, 60, 75, 91, -26, 39, -58, 98, 78, 56, -23, -67, 66, -28, -13, -111, 3, 13, 28, 2, 117, -40, 54, 59, -1, 24, 79, -49, 62, -39, 113, 39, 38, -18, -45, 98, -21, 113, -71, 90, -59, -73, 66, -71, -20, -70, 69, 26, -12, -1, -56, 
  55, -75, -18, -61, 81, -67, 71, -116, -22, -38, -36, -33, -27, 16, -59, -50, 72, -74, -27, 81, 8, 94, -60, -59, 28, -52, -95, 54, -14, 27, -76, -29, 49, 73, -100, -99, -25, 57, 17, 28, 5, -29, 50, -38, -46, 35, 7, 73, 42, -98, 86, -79, 63, -31, -25, 45, -66, 
  47, 89, -46, -1, 97, 109, -24, 41, -36, 103, -20, -22, 102, 37, -28, 124, 69, 69, -42, -76, 2, -50, 27, 10, 114, -47, -6, 78, 115, -27, 22, 2, 85, 84, 108, -66, 54, -60, 37, 118, -70, 1, 71, -42, 117, 80, -3, 6, 80, 84, 12, -88, -45, 3, 115, -70, 24, 
  -104, -50, -36, 64, -38, -18, -28, -16, -47, -61, 43, 38, 4, -14, 7, -3, 69, -101, 9, -35, -82, -93, -1, -101, 10, 5, 50, -48, 11, 81, 64, -28, 8, 91, -95, -16, 3, 29, -11, -5, -97, 49, 62, 54, -59, 105, -81, -8, -26, -55, -52, -33, -75, -78, 85, 50, 23, 
  85, 20, 106, -67, 68, 32, -45, -95, 56, 56, -62, -99, -46, 22, -6, -101, 46, -49, 50, 62, -75, 3, 45, 82, 54, 42, 19, 42, -58, -101, -70, -54, 34, -108, -46, -33, -68, 64, -59, 89, 115, -70, -112, 37, 82, -23, -55, -17, -59, -14, -109, -61, 79, -7, -26, 43, 61, 
  75, 4, 14, -63, 19, -97, -106, 37, 38, -25, -106, 66, 27, 0, 85, -31, 53, 16, -47, 28, 86, -63, 20, 61, 15, 70, 18, 2, -27, -57, -47, 86, -46, 24, 90, -92, -27, -108, 20, 96, 114, -110, 40, -83, -38, 74, 48, -62, 60, 61, 53, -20, 9, 31, -11, -63, -98, 
  1, -94, -39, 70, 4, 40, -36, -35, -21, 79, -34, -89, -17, 97, 50, 14, 19, -101, 14, 14, 64, 85, 91, 86, -80, 65, 90, -74, -35, -90, -31, 76, -36, -49, 17, 66, -97, 74, -39, -103, -99, -107, -10, -95, -77, -83, 78, -60, -81, 55, 99, -60, -27, 45, -53, 83, 15, 
  3, 109, 32, -46, -1, -46, 14, 97, 8, 7, -66, 127, -63, -4, 18, 64, 35, 91, 12, 89, -95, -55, 106, 72, 32, -63, -22, -51, 66, 56, -2, -60, 63, 117, 83, -31, -61, -40, -35, -42, 40, -70, -30, 49, 44, 120, -27, 115, 125, 47, -32, 118, 72, -13, 75, 123, 117, 
  68, 61, -17, -76, 108, 93, -17, 48, -83, -1, 73, -77, 112, 111, -88, -59, 69, 28, -33, -9, -48, 25, 29, 87, -93, 86, -18, 15, -79, -24, -62, -64, 98, 85, -48, -46, -29, 82, 34, 94, 81, 31, 116, 97, 72, 11, -77, 98, 117, 105, 39, 67, -46, 21, 74, -82, 113, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 40,57 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0023583096917718649, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[40] = { -2, 3, 0, 0, 4, -3, -1, -2, -2, 4, 0, -4, -1, -2, 1, 0, 6, 5, 0, 5, -2, 0, 6, 6, -3, -4, -4, -4, 4, 6, 0, 1, -4, 3, 0, -4, -1, -1, 6, 4, };
const TfArray<1, int> tensor_dimension2 = { 1, { 40 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0087328497320413589, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[20*40] = { 
  -62, 28, 87, -28, -68, -24, 98, -29, -83, -17, 77, -82, -48, 103, -77, -54, 50, 124, 93, 86, -25, -96, -24, 49, -62, -83, 88, -23, 21, 77, 64, -70, -75, -73, -40, 44, 76, -21, 28, -19, 
  -71, -52, 25, 72, -40, 13, -28, -83, -45, 46, 36, 6, -13, -34, -7, -64, 64, 32, 49, -45, -102, 49, 127, 14, 15, 85, 9, 42, -2, 34, 101, -45, -40, 107, -26, -63, -72, 105, 72, 34, 
  -77, 7, 66, 43, 74, -74, 38, 32, -32, -109, 100, -19, 51, -65, 13, 62, 36, -35, 97, -28, 71, -5, 93, 59, -12, -45, 16, 78, -37, -19, -65, 14, 36, -7, 53, 66, 37, 24, 95, 38, 
  -68, -63, -15, 66, 82, 71, -2, -24, 22, 19, -56, 72, -9, -103, 28, 44, -52, 16, 83, 23, -91, -71, 46, -63, -8, -44, -61, 37, 14, 22, 5, 17, -37, -108, -35, -56, -12, 12, 18, -87, 
  7, -35, -102, -36, -48, 22, -96, -23, 30, 118, 62, 56, 115, 18, 31, 71, -66, -102, 6, 107, 35, -68, 14, -54, -82, 48, 72, 109, -53, 81, 37, -81, -17, 86, -104, 97, -2, 56, 69, 18, 
  62, -82, -71, 3, 94, -109, -79, -52, -89, -92, 64, -15, -62, -88, -97, 92, 62, -24, 71, 94, 66, 44, -3, 34, -10, -71, -48, 107, -49, -29, 82, -63, -62, -38, 28, -21, 14, -104, 11, -16, 
  88, 0, 64, 13, 51, -43, -98, -1, 45, 44, 89, -79, -101, 11, 91, -88, 71, -28, 5, 71, 21, 65, -57, 97, 22, 41, -84, -56, 64, 4, -72, 17, -75, 95, -93, -3, 48, -14, -3, 57, 
  -59, -75, -21, -30, 73, 53, -21, -26, -67, -58, 81, 69, -119, 37, -74, 14, 54, -80, -66, -16, 10, -55, -89, -36, -8, 16, -9, 87, 36, -34, 63, -1, 42, -71, 29, -11, -27, 31, 26, -104, 
  -70, 7, 96, 58, -22, 43, 91, -17, -81, -1, -96, 35, 65, 1, 81, 92, -16, 60, 9, -29, -89, 10, -4, -17, 19, 22, 8, 2, -20, 23, -55, -23, -39, 0, 38, -94, -15, -88, 14, -39, 
  -28, 22, -75, 73, 78, -20, -87, -83, 101, -34, 38, -73, -55, -36, 31, 0, 22, 39, 17, -85, 63, 62, 54, -56, -29, 49, 61, 9, 27, -13, -74, -69, -27, -101, -17, -46, 52, 96, 95, -103, 
  -3, 18, -62, 18, -97, -60, 84, 1, 14, 10, -48, -20, -87, -53, -44, -38, -48, 46, 9, 18, 88, 88, 48, 20, -66, 5, -32, -69, -4, -53, -42, -93, -105, 100, 87, -29, -91, 61, 7, 1, 
  24, 22, 9, -45, -80, -94, -24, -81, 58, -100, 89, 54, 93, 61, 62, 10, 102, 49, -47, 39, 36, 19, 100, 94, -3, -26, 79, 90, 15, -54, 33, -35, 40, -84, 32, 81, 25, 80, -112, 69, 
  71, -52, -2, -45, 78, -47, -98, -34, 101, -30, -69, 61, 46, -64, 87, -96, -16, 75, 91, -41, 66, 84, -68, -92, -23, 5, -48, 13, -107, -47, -96, 80, 102, -95, 81, -63, -66, 35, 0, -12, 
  -21, -99, 47, 78, -94, 28, -68, 101, 21, -84, 87, 86, -87, 81, 43, 14, -11, -71, 63, -96, -23, 76, -102, 11, 82, -57, -25, 0, -104, -24, -48, -7, 91, 91, 33, 51, -16, 97, -81, -6, 
  7, -78, 89, -6, 99, -102, 37, 19, -92, 23, 102, 99, -49, -82, -4, -100, -9, 41, -28, 53, -1, 106, -103, -47, 61, 66, -13, -51, -38, -54, 99, 2, 52, 69, -16, 34, -107, 74, -11, -59, 
  80, -9, -20, -23, -107, 85, 44, 78, -14, 62, 58, 3, -7, -104, -68, 82, -38, 79, 77, -43, 22, 97, 84, 77, 10, 12, 59, 88, -70, -9, 15, -94, 9, -55, 93, -3, 77, 22, 49, -121, 
  -32, 66, -29, 48, 69, 50, -9, -9, -28, -61, 34, 55, 52, -95, 56, -56, 90, -65, 38, -103, -62, -4, 60, 80, 75, -72, -60, 50, -57, 53, -35, 31, 31, -49, 71, -4, 20, -20, -16, -82, 
  87, -78, -17, -83, 67, 107, -10, -45, 15, 45, 44, -74, 77, 5, 79, 57, -31, -86, 25, 60, -17, 14, 77, -12, 47, -18, 71, 64, 30, -11, 49, 54, -11, 7, -3, -23, 100, 69, 28, 39, 
  61, 48, -3, -99, -81, 69, 97, 43, 88, -3, 36, -2, -28, 75, -17, -73, 19, -9, -40, -95, 90, -80, -65, -59, -72, 93, -109, 37, 29, -2, -105, 68, -24, -18, -80, -58, -89, -85, -20, 22, 
  33, 77, 61, -57, -34, 29, -33, 22, 94, 93, -8, 96, 0, -92, -98, -85, 72, -49, 28, -6, -33, 48, 21, -39, 100, -32, -51, -46, -32, -54, 34, 101, -30, -64, -61, -27, -6, -92, -100, -25, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 20,40 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0029503828845918179, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[20] = { 26, 18, 0, -9, 13, -4, 8, -15, 0, 0, -3, -16, 0, -13, -2, -13, -12, 7, -8, -2, };
const TfArray<1, int> tensor_dimension4 = { 1, { 20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0025618784129619598, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[3*20] = { 
  -30, -108, -107, 85, 53, -5, 45, 35, -80, -13, -21, 66, 29, 99, 101, -42, -67, 47, -76, -81, 
  70, 4, 84, -69, 43, 3, -5, 36, 74, 11, -96, 25, 100, 33, -67, 23, -95, 81, 4, 72, 
  -127, -28, 14, 54, 79, 24, -40, -3, 20, -51, 16, -99, -85, -87, -22, -57, -99, 116, 90, -21, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0046045221388339996, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[3] = { 0, -4, 6, };
const TfArray<1, int> tensor_dimension6 = { 1, { 3 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0046989242546260357, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,40 } };
const TfArray<1, float> quant7_scale = { 1, { 0.86832064390182495, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,20 } };
const TfArray<1, float> quant8_scale = { 1, { 1.0205020904541016, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<1, float> quant9_scale = { 1, { 0.68952935934066772, } };
const TfArray<1, int> quant9_zero = { 1, { -127 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 57, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 2280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 60, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
